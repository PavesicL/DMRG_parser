#!/usr/bin/env python3
"""
Parses the DMRG output file and saves the spectral weights to files. 
"""

import os
import sys
import re
import numpy as np
import itertools

sys.path.insert(1, "/home/pavesic/git_repos/arc_manipulator/")
from arc_functions import readNameFile
from DMRG_parser_functions import readNameFileParsing
##################################

#get params, job name, path to save and the sweep parameter
name, paramList = readNameFile("nameFile")
regexName, _ = readNameFile("nameFile", regex=True)
sweepParam, savepath = readNameFileParsing("nameFile", "get_spectral_weights")

outputName = "output"	#subject to change - maybe allow user input here

#determine which param in paramList is the sweep one -- paramList[whichParam][0] is the parameter for which to save the energy sweeps
for i in range(len(paramList)):
	param = paramList[i][0]
	if param == sweepParam:
		whichParam = i 
		break

result_dir = os.getcwd() + "/results"

#get all unique values of each parameter and save them to uniqueParamList. Range is len(paramList)-1 as one parameter sweep is always saved in the files
uniqueParamList = [[] for i in range(len(paramList)-1)]
j=-1
for i in range(len(uniqueParamList)+1):

	param = paramList[i][0]	
	if param != sweepParam:
		j+=1

		for subdir, dirs, files in os.walk(result_dir):
			for direc in dirs:	#iterate over all folders
				
				folder = os.path.join(subdir, direc)

				a = re.search(param+"([0-9]+\.*[0-9]*)", folder)
				if a:
					paramval = float(a.group(1))
					uniqueParamList[j].append(paramval)


uniqueParamList = [np.unique(i) for i in uniqueParamList]	#save only unique values			

#get values from all folders
saved=0
EList=[]
for subdir, dirs, files in os.walk(result_dir):
	for direc in dirs:	#iterate over all folders
		folder = os.path.join(subdir, direc)

		aa = re.search(regexName, folder)	#for each folder, check if it is of the job
		bb = re.search("gridlog", folder)	#dirty fix to not include the gridlog subfolder, generated by ARC

		if aa and not bb:
			#THIS IS A DIRTY TRICK, AS regaxName ALSO MATCHES gamma(0.0/gridlog), SO ALL SUBFOLDERS ARE MATCHED ALSO
			try:
				paramVals = [float(aa.group(i+1)) for i in range(len(paramList))] 	#values of the parameters are saved in this list	
			except ValueError:
				continue

			result_file = folder+"/"+outputName
			#CHECK IF THE OUTPUT FILE EXISTS
			if not os.path.isfile(result_file):
				result_file += ".txt"
			if not os.path.isfile(result_file):
				print("The output file is not output or output.txt; or does not exist!")
				
			with open(folder+"/"+outputName, "r") as resF:
				#save the occupancy of the ground state sector
				sector=False
				for line in resF:

					b = re.search("weight w\+ up: (\-*\d+\.*\d*)", line)
					c = re.search("weight w\+ dn: (\-*\d+\.*\d*)", line)
					d = re.search("weight w\- up: (\-*\d+\.*\d*)", line)
					e = re.search("weight w\- dn: (\-*\d+\.*\d*)", line)

					if b:
						wpup = float(b.group(1))
					if c:
						wpdn = float(c.group(1))
					if d:
						wmup = float(d.group(1))
					if e:
						wmdn = float(e.group(1))

			EList.append(paramVals+[wpup, wpdn, wmup, wmdn])			
			saved+=1			

#split EList into lists for each unique value of the parameters given in uniqueParamList
allParamCombinations = list(itertools.product(*uniqueParamList))
allParamCombinations = [list(i) for i in allParamCombinations]	#transform all elements to lists, not tuples
#splitElist is just a reshape of EList, with splitElist[i] being the energy sweep over the sweep parameter and with other parameters given as allParamCombinations[i]
splitElist = [[] for i in range(len(allParamCombinations))]	
for i in range(len(EList)):
	for j in range(len(allParamCombinations)):

		paramVals = EList[i][:-4]	#all values in EList that are parameters
		paramVals = paramVals[:whichParam]+paramVals[whichParam+1:]	#take out the sweep parameter		
		#print(paramVals, allParamCombinations[j])
		if paramVals == allParamCombinations[j]:


			splitElist[j].append([EList[i][whichParam]] + EList[i][-4:])	#append the value of the sweep parameter and impOcc


#sort the lists by the value of the sweep param
for i in range(len(splitElist)):
	splitElist[i] = sorted(splitElist[i])		
	
#save every splitElist[i] 
for i in range(len(splitElist)):	
	if len(splitElist[i])>0:
		print("Saved to {0}".format(savepath.format(*allParamCombinations[i])))
		np.savetxt(fname=savepath.format(*allParamCombinations[i]), X=splitElist[i], delimiter="	")

if saved!=0:
	print("Saved {0} sets of spectral weights.".format(saved))
	
else:
	print("No files found in given range!")